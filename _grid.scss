// || _-_-_-_-_-_ VARIABLES _-_-_-_-_-_ || //
$grid-columns: 12;
$total-gaps: 24;
$base-gap: 0.1rem; // 0.1rem -> 1px in rem
$layout-values: flex-start, flex-end, center, space-between, space-around,
  space-evenly;
$layout-directions: row, row-reverse, column, column-reverse;
$display: grid, block, inline, inline-flex, flex, hidden, unset;

// || _-_-_-_-_-_ GRID SYSTEM _-_-_-_-_-_ || //
.row {
  // Set as a parent of all columns to make the columns functional
  --_gap: 0rem;
  display: flex;
  flex-wrap: wrap;
}

// || _-_-_-_-_-_ DISPLAY _-_-_-_-_-_ || //
@each $value in $display {
  @if $value == hidden {
    .display-#{$value} {
      display: none;
    }
  } @else {
    .display-#{$value} {
      display: $value;
    }
  }
}

// || _-_-_-_-_-_ FLEX _-_-_-_-_-_ || //
@each $value in $layout-directions {
  .flex-#{$value} {
    flex-direction: $value;
  }
}
@each $value in $layout-values {
  .justify-#{$value} {
    justify-content: $value;
  }
  .align-#{$value} {
    align-items: $value;
  }
}

// || _-_-_-_-_-_ GAP _-_-_-_-_-_ || //

@each $key, $value in $spacings {
  .gap-#{$key} {
    --_gap: #{$value};
    gap: var(--_gap);
  }
  .gap-x-#{$key} {
    --_gap: #{$value};
    column-gap: var(--_gap);
  }
  .gap-y-#{$key} {
    --_row-gap: #{$value};
    row-gap: var(--_row-gap);
  }
}

// || _-_-_-_-_-_ COLUMN _-_-_-_-_-_ || //
.col-auto {
  flex: 1 1 auto;
}

@for $i from 1 through $grid-columns {
  .col-#{$i} {
    --columns: calc(#{$grid-columns} / #{$i});
    // total amount of gap needed to be subtracted from the column width
    --gap: calc(var(--_gap) * (var(--columns) - 1) / var(--columns));
    flex-grow: 0;
    width: calc(calc(100% / $grid-columns * $i) - var(--gap));
  }
}

// || _-_-_-_-_-_ RESPONSIVE _-_-_-_-_-_ || //
@each $breakpointName, $breakpointValue in $breakpoints {
  @include breakpoint($breakpointValue) {
    .col-auto-#{$breakpointName} {
      flex: 1 1 auto;
    }
    @for $i from 1 through $grid-columns {
      .col-#{$i}-#{$breakpointName} {
        --columns: calc(#{$grid-columns} / #{$i});
        // total amount of gap needed to be subtracted from the column width
        --gap: calc(var(--_gap) * (var(--columns) - 1) / var(--columns));
        flex-grow: 0;
        width: calc(calc(100% / $grid-columns * $i) - var(--gap));
      }
    }
    /* Flex controls */
    @each $flexDirection in $layout-directions {
      .flex-#{$flexDirection}-#{$breakpointName} {
        flex-direction: $flexDirection;
      }
    }
    @each $flexPosition in $layout-values {
      .justify-#{$flexPosition}-#{$breakpointName} {
        justify-content: $flexPosition;
      }
      .align-#{$flexPosition}-#{$breakpointName} {
        align-items: $flexPosition;
      }
    }
    @each $gapKey, $gapValue in $spacings {
      .gap-#{$gapKey}-#{$breakpointName} {
        --_gap: #{$gapValue};
        gap: var(--_gap);
      }
      .gap-x-#{$gapKey}-#{$breakpointName} {
        --_gap: #{$gapValue};
        column-gap: var(--_gap);
      }
      .gap-y-#{$gapKey}-#{$breakpointName} {
        --_row-gap: #{$gapValue};
        row-gap: var(--_row-gap);
      }
    }
  }
}
